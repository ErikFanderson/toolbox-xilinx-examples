// File autogenerated by vlog_mem_map python project
// Date Generated: 2021-04-28 10:37:30.454028
// Configuration File: config.yml
// Memory Name: uart_i2c_user_clock
// Memory Word Width: 8
// Address Range: 128
`default_nettype none

/***************************************/
/* Module: uart_i2c_user_clock_mem_map */
/***************************************/
module uart_i2c_user_clock_mem_map
(
input wire [7:0] uart_i2c_user_clock_write_mem [127:0],
output wire [7:0] uart_i2c_user_clock_read_mem [127:0],
output wire [7:0] leds,
output wire reset,
output wire rv0_valid_pulse,
input wire rv0_ready,
output wire [6:0] rv0_slave_address,
output wire [1:0] rv0_burst_count_wr,
output wire [1:0] rv0_burst_count_rd,
output wire [7:0] rv0_wdata0,
output wire [7:0] rv0_wdata1,
output wire [7:0] rv0_wdata2,
output wire [7:0] rv0_wdata3,
output wire rv0_rd_wrn,
input wire rv1_valid,
output wire rv1_ready,
input wire [7:0] rv1_rdata0,
input wire [7:0] rv1_rdata1,
input wire [7:0] rv1_rdata2,
input wire [7:0] rv1_rdata3
);

/*************************************************/
/* Define Memory and Connect to Flattened Vector */
/*************************************************/
wire [1023:0] flat_uart_i2c_user_clock_write_mem;
generate for (genvar i=0; i<128; i=i+1) begin: gen_write_uart_i2c_user_clock
    assign flat_uart_i2c_user_clock_write_mem[((i+1)*8)-1-:8] = uart_i2c_user_clock_write_mem[i];
end endgenerate
wire [1023:0] flat_uart_i2c_user_clock_read_mem;
generate for (genvar i=0; i<128; i=i+1) begin: gen_read_uart_i2c_user_clock
    assign uart_i2c_user_clock_read_mem[i] = flat_uart_i2c_user_clock_read_mem[((i+1)*8)-1-:8];
end endgenerate

/**************/
/* Field: LED */
/**************/
// Assigns for register: leds
assign flat_uart_i2c_user_clock_read_mem[`leds_Sel] = leds;
assign leds = flat_uart_i2c_user_clock_write_mem[`leds_Sel];

/****************/
/* Field: RESET */
/****************/
// Assigns for register: reset
assign flat_uart_i2c_user_clock_read_mem[`reset_Sel] = reset;
assign reset = flat_uart_i2c_user_clock_write_mem[`reset_Sel];

/**************/
/* Field: I2C */
/**************/
// Assigns for register: rv0_valid_pulse
assign flat_uart_i2c_user_clock_read_mem[`rv0_valid_pulse_Sel] = rv0_valid_pulse;
assign rv0_valid_pulse = flat_uart_i2c_user_clock_write_mem[`rv0_valid_pulse_Sel];
// Assigns for register: rv0_slave_address
assign flat_uart_i2c_user_clock_read_mem[`rv0_slave_address_Sel] = rv0_slave_address;
assign rv0_slave_address = flat_uart_i2c_user_clock_write_mem[`rv0_slave_address_Sel];
// Assigns for register: rv0_burst_count_wr
assign flat_uart_i2c_user_clock_read_mem[`rv0_burst_count_wr_Sel] = rv0_burst_count_wr;
assign rv0_burst_count_wr = flat_uart_i2c_user_clock_write_mem[`rv0_burst_count_wr_Sel];
// Assigns for register: rv0_burst_count_rd
assign flat_uart_i2c_user_clock_read_mem[`rv0_burst_count_rd_Sel] = rv0_burst_count_rd;
assign rv0_burst_count_rd = flat_uart_i2c_user_clock_write_mem[`rv0_burst_count_rd_Sel];
// Assigns for register: rv0_wdata0
assign flat_uart_i2c_user_clock_read_mem[`rv0_wdata0_Sel] = rv0_wdata0;
assign rv0_wdata0 = flat_uart_i2c_user_clock_write_mem[`rv0_wdata0_Sel];
// Assigns for register: rv0_wdata1
assign flat_uart_i2c_user_clock_read_mem[`rv0_wdata1_Sel] = rv0_wdata1;
assign rv0_wdata1 = flat_uart_i2c_user_clock_write_mem[`rv0_wdata1_Sel];
// Assigns for register: rv0_wdata2
assign flat_uart_i2c_user_clock_read_mem[`rv0_wdata2_Sel] = rv0_wdata2;
assign rv0_wdata2 = flat_uart_i2c_user_clock_write_mem[`rv0_wdata2_Sel];
// Assigns for register: rv0_wdata3
assign flat_uart_i2c_user_clock_read_mem[`rv0_wdata3_Sel] = rv0_wdata3;
assign rv0_wdata3 = flat_uart_i2c_user_clock_write_mem[`rv0_wdata3_Sel];
// Assigns for register: rv0_rd_wrn
assign flat_uart_i2c_user_clock_read_mem[`rv0_rd_wrn_Sel] = rv0_rd_wrn;
assign rv0_rd_wrn = flat_uart_i2c_user_clock_write_mem[`rv0_rd_wrn_Sel];
// Assigns for register: rv1_ready
assign flat_uart_i2c_user_clock_read_mem[`rv1_ready_Sel] = rv1_ready;
assign rv1_ready = flat_uart_i2c_user_clock_write_mem[`rv1_ready_Sel];
// Assigns for register: rv0_ready
assign flat_uart_i2c_user_clock_read_mem[`rv0_ready_Sel] = rv0_ready;
// Assigns for register: rv1_valid
assign flat_uart_i2c_user_clock_read_mem[`rv1_valid_Sel] = rv1_valid;
// Assigns for register: rv1_rdata0
assign flat_uart_i2c_user_clock_read_mem[`rv1_rdata0_Sel] = rv1_rdata0;
// Assigns for register: rv1_rdata1
assign flat_uart_i2c_user_clock_read_mem[`rv1_rdata1_Sel] = rv1_rdata1;
// Assigns for register: rv1_rdata2
assign flat_uart_i2c_user_clock_read_mem[`rv1_rdata2_Sel] = rv1_rdata2;
// Assigns for register: rv1_rdata3
assign flat_uart_i2c_user_clock_read_mem[`rv1_rdata3_Sel] = rv1_rdata3;
endmodule
`default_nettype wire